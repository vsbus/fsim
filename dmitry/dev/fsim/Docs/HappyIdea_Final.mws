{VERSION 6 0 "IBM INTEL NT" "6.0" }
{USTYLETAB {CSTYLE "Maple Input" -1 0 "Courier" 0 1 255 0 0 1 0 1 0 0 
1 0 0 0 0 1 }{CSTYLE "2D Math" -1 2 "Times" 0 1 0 0 0 0 0 0 2 0 0 0 0 
0 0 1 }{CSTYLE "2D Output" 2 20 "" 0 1 0 0 255 1 0 0 0 0 0 0 0 0 0 1 }
{CSTYLE "" -1 365 "" 1 18 0 0 0 0 0 0 0 0 0 0 0 0 0 0 }{PSTYLE "Normal
" -1 0 1 {CSTYLE "" -1 -1 "Times" 1 12 0 0 0 1 2 2 2 2 2 2 1 1 1 1 }1 
1 0 0 0 0 1 0 1 0 2 2 0 1 }{PSTYLE "Heading 1" -1 3 1 {CSTYLE "" -1 
-1 "Times" 1 18 0 0 0 1 2 1 2 2 2 2 1 1 1 1 }1 1 0 0 8 4 1 0 1 0 2 2 
0 1 }{PSTYLE "Heading 2" -1 4 1 {CSTYLE "" -1 -1 "Times" 1 14 0 0 0 1 
2 1 2 2 2 2 1 1 1 1 }1 1 0 0 8 2 1 0 1 0 2 2 0 1 }{PSTYLE "Maple Outpu
t" -1 11 1 {CSTYLE "" -1 -1 "Times" 1 12 0 0 0 1 2 2 2 2 2 2 1 1 1 1 }
3 3 0 0 0 0 1 0 1 0 2 2 0 1 }{PSTYLE "Heading 3" -1 256 1 {CSTYLE "" 
-1 -1 "Times" 1 14 0 0 0 1 1 1 2 2 2 2 1 1 1 1 }1 1 0 0 0 0 1 0 1 0 2 
2 0 1 }}
{SECT 0 {EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 8 "restart:" }}}{EXCHG }
{SECT 1 {PARA 3 "" 0 "" {TEXT -1 27 "module  ErfExpIntCalculator" }}
{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 52 "ErfExpIntCalculator := \nmod
ule()\nexport ErfExpInt; \n" }{TEXT -1 54 "---------------------------
---------------------------" }{MPLTEXT 1 0 324 "\nlocal PiSqrt::numeri
c, epsHalf::numeric, epsQuarter::numeric, xT::numeric, \n      nIter::
integer, nBounds::integer, \n      bounds, shifts, coeffsErf, coeffsEr
fc, \n      intExpATSqrBT, isNoNeedOfRecur, isPracticalZero, condEps, \+
ErfExpIntStAfter0_5, \n      ErfExpIntStBefore0_5, getPos, ErfExpIntPo
sBounds, ErfExpIntSpecial;\n" }{TEXT -1 44 "==========================
==================" }{MPLTEXT 1 0 191 "\n   PiSqrt  := 1.7724538509055
1602729816748334;\n   epsHalf := 0.5 * 10^(-9);\n   epsQuarter := 0.25
 * 10^(-9);\n   xT      := 4.397571017214433973343322;\n   nIter   := \+
15;\n   nBounds := 40:\n   " }{TEXT -1 26 "--------------------------
" }{MPLTEXT 1 0 355 "\n   bounds := [0.5, 0.7375, 0.975, 1.2125, 1.45,
 1.6875, 1.925, 2.1625, 2.4, 2.6375, 2.875, 3.1125, 3.35, \n          \+
    3.5875, 3.825, 4.0625, 4.3, 4.5375, 4.775, 5.0125, 5.25, 5.4875, 5
.725, 5.9625, 6.2, 6.4375, \n              6.675, 6.9125, 7.15, 7.3875
, 7.625, 7.8625, 8.1, 8.3375, 8.575, 8.8125, 9.05, 9.2875, 9.525, \n  \+
            9.7625, 10.0];\n   " }{TEXT -1 26 "-----------------------
---" }{MPLTEXT 1 0 1261 "\n   shifts := [0.618750000014551915228367, 0
.856249999997089616954325, 1.09374999997962731868027,\n              1
.33124999999781721271575, 1.56875000001600710675121, 1.806249999998544
80847715, \n              2.04374999998108251020312, 2.281250000034924
59654809, 2.51875000001746229827404, \n              2.75625, 2.993750
00000036379788071, 3.23125000000072759576141, 3.4687500000189174897968
8,\n              3.70625000000145519152285, 3.94374999998399289324879
, 4.18125000000218278728425, \n              4.41875000002037268131972
, 4.65625000000291038304568, 4.89374999998544808477163, \n            \+
  5.13125000000363797880709, 5.36874999995052348822354, 5.606250000004
36557456851, \n              5.84374999998690327629447, 6.081250000040
74536263943, 6.31874999998763087205588, \n              6.556250000005
82076609136, 6.79374999998835846781731, 7.03124999997089616954326, \n \+
             7.26874999995343387126923, 7.50625000000727595761418, 7.7
4374999991850927472115, \n              7.98124999997235136106611, 8.2
1875000002619344741106, 8.45625000000873114913701, \n              8.6
9374999999126885086299, 8.93125000011641532182694, 9.16875000009895302
355289, \n              9.40624999993888195604085, 9.64375000006402842
700482, 9.79999999992869561538101];\n   " }{TEXT -1 26 "--------------
------------" }{MPLTEXT 1 0 378 "\n   coeffsErf := [-.3333333333333333
33333333, .1, -.238095238095238095238095e-1, .462962962962962962962963
e-2,\n                 -.757575757575757575757576e-3, .106837606837606
837606838e-3, -.132275132275132275132275e-4,\n                  .14589
1690009337068160598e-5, -.145038522231504687645039e-6, .13122532963802
8050726463e-7,\n                 -.108922210371485733804574e-8]:\n" }
{TEXT -1 26 "--------------------------" }{MPLTEXT 1 0 18370 "\ncoeffs
Erfc := [.279763689203807902590448, -.217982018149901814442494, .14488
7315470384083801509, -.855553278003287423144249e-1, .45974978196343210
4545924e-1, -.228433240162709044609932e-1, .106135571536455474504835e-
1, -.465033872206882830464019e-2, .193404001731822800336980e-2, -.7674
78102576552961543818e-3, .291832588362789377287746e-3, -.1067103069711
51306198947e-3, .376342640642080067866884e-4, -.1283447755510914644850
34e-4, .424184727284258099165650e-5, .235150109394083386202506, -.1614
95021211757238879551, .968699974819862606650986e-1, -.5236672391205907
45645659e-1, .260154950662190722750939e-1, -.120363825046725479344295e
-1, .523644751554204805915213e-2, -.215790694843627437380231e-2, .8471
84922743831938900050e-3, -.318334412951553823377704e-3, .1149222163072
49727382316e-3, -.399876845905263025664474e-4, .1344712693172389406385
66e-4, -.438055113363956245314393e-5, .138518285645882572011403e-5, .2
01632118166514805327476, -.123119325066720727819762, .6697035637729728
98672616e-1, -.332469985202773298161581e-1, .153032258732105602932743e
-1, -.660363808870709874409653e-2, .269349890460771744994932e-2, -.104
503533195247386246820e-2, .387622877574061798639728e-3, -.138016179920
842979394919e-3, .473335361646699804631983e-4, -.156809317671394319059
619e-4, .503041949790163397729984e-5, -.156598621842161427392112e-5, .
473946014629587440373476e-6, .175767574424705900794699, -.962084166427
441463333244e-1, .476901197692627498604542e-1, -.218139631333449728249
777e-1, .932514067402240242288066e-2, -.375994784442808661954893e-2, .
143990336871232264664505e-2, -.526593281383983482145687e-3, .184719015
717114948320699e-3, -.623746870421650922537191e-4, .203365427178848345
497178e-4, -.641848446734029580193805e-5, .196532254728973261986751e-5
, -.584945972109361593510452e-6, .169516172756145843176127e-6, .155342
931858314743410168, -.768011348373206098487691e-1, .348611515810386564
452705e-1, -.147418021960052330387184e-1, .586747469291014854664445e-2
, -.221488050856436457328993e-2, .797626965019582932864956e-3, -.27531
5202048980446357480e-3, .914315604533349580528116e-4, -.29307098132095
3405677930e-4, .909121004925856790121907e-5, -.27355022469401070918554
0e-5, .799981817231186159595428e-6, -.227773965752852161337859e-6, .63
2373442685973990075179e-7, .138888687790764631842534, -.62454198904023
2537543967e-1, .260807910204636184979627e-1, -.10230513415566007785043
1e-1, .380096308180512070716896e-2, -.134600953962478531207854e-2, .45
6577783622729224414301e-3, -.148947405128564812312443e-3, .46885383274
5387955706811e-4, -.142801514663335149138110e-4, .42183719393599031010
2612e-5, -.121103948120113407710649e-5, .338488645321992395264238e-6, \+
-.922529793114557575258214e-7, .245509575504006254537284e-7, .12540103
4576743618719275, -.516128547200612949550253e-1, .19917262743594468500
2289e-1, -.727129932547847696019234e-2, .252827237364370055733109e-2, \+
-.841657064753459808326050e-3, .269378582523739951194803e-3, -.8317559
62119602111258864e-4, .248471144392750156062058e-4, -.7198734681544256
74244479e-5, .202694008816737504237646e-5, -.555668341880557725050606e
-6, .148548818877887854086856e-6, -.387802602925680859362187e-7, .9898
80880889018260994593e-8, .114176482988066348064658, -.4325937990672855
90257363e-1, .154910225743310770306609e-1, -.528032310566134474814446e
-2, .172264274468127761164783e-2, -.540217737721021548480547e-3, .1634
23676820817283499025e-3, -.478307071370601835367301e-4, .1357746904478
02467795754e-4, -.374602352536472652834170e-5, .1006370574906079145573
77e-5, -.263680118998243182080001e-6, .674750507784290471347143e-7, -.
168850244816296750792458e-7, .413658405042844300439286e-8, .1047105330
65329465531565, -.367102732275018248305739e-1, .1224653237291985948029
95e-1, -.390954654199631967863280e-2, .119968101009232138365815e-2, -.
355139999135538749051760e-3, .101724045750322172201738e-3, -.282635882
478562999051125e-4, .763378322101222498410164e-5, -.200799927934397226
302790e-5, .515227005955555651382232e-6, -.129140228719681229813069e-6
, .316591759797629508793424e-7, -.759979684803901494712947e-8, .178816
965906717441962472e-8, .966338157090799532204839e-1, -.314956744514523
544236022e-1, .982386300226269522964336e-2, -.294576803432326762095069
e-2, .852294928809538613927733e-3, -.238652054718798025486066e-3, .648
367343547189884254980e-4, -.171273730193346149095463e-4, .440735312427
421279847659e-5, -.110657910651242462094352e-5, .271468891626292094422
575e-6, -.651532676973777073633971e-7, .153150329502270617367515e-7, -
.352941667297326651436110e-8, .798154043007415390520042e-9, .896707996
925723396816592e-1, -.272856703884173967294115e-1, .798432396722158254
719476e-2, -.225506700771997224137435e-2, .616608556440583641435521e-3
, -.163638056684256007801919e-3, .422390414872996572442479e-4, -.10624
2646051312410745962e-4, .260816233272243904844875e-5, -.62579525206149
9683425447e-6, .146937559368885115693927e-6, -.33800169513790792399140
6e-7, .762471693491375842054800e-8, -.168825742457463699093242e-8, .36
7213759774200447824737e-9, .836124541212926360578311e-1, -.23844098788
7938524387347e-1, .656620990996883767828850e-2, -.17513553447538949740
2967e-2, .453571476282495242779158e-3, -.114301004597487053207733e-3, \+
.280787851851606334307356e-4, -.673469424711534795199380e-5, .15793260
9550691560284123e-5, -.362554846882876039169761e-6, .81564149758450720
8330573e-7, -.180001249874216486519289e-7, .390020759709145311661892e-
8, -.830396793636643319597591e-9, .173855425017520361387377e-9, .78297
7554405582025274504e-1, -.209989051759210887901292e-1, .54578031112931
5915069026e-2, -.137810042198578638515504e-2, .33875863678609630617860
6e-3, -.812125598314915052195364e-4, .190175234559277801732602e-4, -.4
35586436622154807945650e-5, .977029726159474185003204e-6, -.2148427795
39835270513730e-6, .463587674707024850076142e-7, -.9824691814894328282
88530e-8, .204656125972507319833835e-8, -.419335752849811623327024e-9,
 .845700522541319667177350e-10, .736009276529220128989519e-1, -.186227
073201087536307160e-1, .458051864835246187545377e-2, -.109744005194625
023036244e-2, .256565729092018363499654e-3, -.586173267282217756330814
e-4, .131050874843962016727347e-4, -.287045606651402898777216e-5, .616
614913488914402626699e-6, -.130028231666001906680158e-6, .269395563877
477237583590e-7, -.548790930904967424281974e-8, .109999874363933715663
981e-8, -.217082912094800687005601e-9, .422050277085792011206807e-10, \+
.694224769539922269856357e-1, -.166197965746566855985837e-1, .38781542
1488441465418955e-2, -.883550590480090048905034e-3, .19682578897636937
8131666e-3, -.429275531557478768284941e-4, .917675057903690123272922e-
5, -.192478374468150964450747e-5, .396471164321591812499999e-6, -.8026
67969225110984480320e-7, .159837970043832690628208e-7, -.3132854163655
30040532703e-8, .604767237120756009712524e-9, -.1150466700928471228926
78e-9, .215788465980360116124780e-10, .656827862961665866107025e-1, -.
149172831435656847430908e-1, .330989615680446879413408e-2, -.718519886
656621887961226e-3, .152792443729530166255026e-3, -.318625913722131057
925377e-4, .652232799187187404314068e-5, -.131174501223506557235708e-5
, .259398535089484843082689e-6, -.504744181884806965349463e-7, .967047
484753139966060660e-8, -.182540827905110943048955e-8, .339664422127479
609841129e-9, -.623363709637226692909325e-10, .11288638258089202676929
4e-10, .623174679136732228796694e-1, -.134589608525899811509582e-1, .2
84568465579165585903681e-2, -.589727843992569403244977e-3, .1199123774
13350632234592e-3, -.239460091976175628330945e-4, .4700316516736242425
65690e-5, -.907567342513016569086443e-6, .172500828347621333568879e-6,
 -.322954004291890260494408e-7, .595910546880271304799286e-8, -.108429
151005996714136611e-8, .194648734618072496009384e-9, -.344903719679723
799019591e-10, .603491461346992525454058e-11, .59273943064525025080823
4e-1, -.122009887470052665672892e-1, .246308922937905759290774e-2, -.4
88153000590205745060366e-3, .950634166659817717377381e-4, -.1820558528
08165996499976e-4, .343122010629863689229177e-5, -.6368476505279690661
76431e-6, .116474558521956489981197e-6, -.210028851502150011288731e-7,
 .373597478558146108682318e-8, -.655864111058153630948035e-9, .1136845
92218957837556762e-9, -.194646513931584122850041e-10, .329318701806410
466162400e-11, .565088916228594079134584e-1, -.11108806767203809238673
2e-1, .214516853689576139844340e-2, -.407258805032696619226338e-3, .76
0728880602422568969490e-4, -.139908422041660588786794e-4, .25350679929
5790211834979e-5, -.452815235072828757200653e-6, .79775860907722633099
2465e-7, -.138693584239183044219786e-7, .238053749333423449075807e-8, \+
-.403564191089456579773348e-9, .675992088340939366524334e-10, -.111923
950248501583502571e-10, .183234658558397976227330e-11, .53986326994795
1357222979e-1, -.101549027210514117821879e-1, .18789824565182167280601
6e-2, -.342249297290310973660998e-3, .614078847448091183063961e-4, -.1
08600341025479467653516e-4, .189411152207152863367069e-5, -.3259641280
22375255092348e-6, .553770253966768813495798e-7, -.9291281095561346690
76124e-8, .154022774093710224058878e-8, -.252361354417683732333008e-9,
 .408830915407822297129674e-10, -.655076835087803841456027e-11, .10384
9456184662784972537e-11, .516761265154231795375548e-1, -.9317175022300
70501015018e-2, .165454318899809784993182e-2, -.2895641441225808914528
10e-3, .499728565411098376513639e-4, -.850894697267537669053026e-5, .1
43014905794263035267388e-5, -.237381225793011338769578e-6, .3892715380
93809856600323e-7, -.630912629619377981567228e-8, .1011006314672603446
96338e-8, -.160233833275712969821471e-9, .251251538365705136655481e-10
, -.389894854517093685884486e-11, .598953462577493524091114e-12, .4955
28976964549205009114e-1, -.857771801198721449394718e-2, .1464066198456
81232562163e-2, -.246531206223128674250264e-3, .4097532459243745387472
30e-4, -.672531600367637789748513e-5, .109050711713799863008480e-5, -.
174760150934699265269770e-6, .276895085719587288047940e-7, -.433907640
607793351964128e-8, .672712235970297473052255e-9, -.103215159210994934
257112e-9, .156770410792668046837033e-10, -.235780746788087960216582e-
11, .351226176612964748409551e-12, .475950949776343225563482e-1, -.792
191082391204646964188e-2, .130142874855391912709378e-2, -.211124318601
645067977477e-3, .338355198462225551177318e-4, -.535919891561440954185
889e-5, .839233577299422272735550e-6, -.129979350565815195207735e-6, .
199166899107363125082639e-7, -.302026549059476415314971e-8, .453402656
863866830148770e-9, -.673988486671347158318478e-10, .99234383858976852
5025566e-11, -.144750089512645337325368e-11, .209229312846763415631692
e-12, .457843252971774362586463e-1, -.733772686112270237509080e-2, .11
6177402148687944901196e-2, -.181792317088199418959275e-3, .28124761495
5883203756551e-4, -.430344383398176874446653e-5, .65148106721455552419
2516e-6, -.976070296533949716475544e-7, .144770821353060190497573e-7, \+
-.212628332684575178626627e-8, .309324316928314985538820e-9, -.4458268
91035086097695317e-10, .636763901880262619010601e-11, -.90145910467033
4719933628e-12, .126520130897063046745187e-12, .4410479745057941183068
10e-1, -.681520540269430977076922e-2, .104121857203058839588453e-2, -.
157336941120624493157588e-3, .235229032168781560401890e-4, -.348063813
358066905822038e-5, .509873509834097313155377e-6, -.739642535902303688
073711e-7, .106279726951985464968587e-7, -.151305605477724533853489e-8
, .213469949534180027391776e-9, -.298532342259426992849635e-10, .41391
3695354515017737633e-11, -.569086508850304967140277e-12, .776030859866
351500234933e-13, .425428819408561054449225e-1, -.63460435934783961697
4949e-2, .936633962061226730935816e-3, -.136824678822602175732373e-3, \+
.197885966995751499207118e-4, -.283427647523086351149538e-5, .40212369
8396130400382871e-6, -.565294170840713850152956e-7, .78756784629607283
1304930e-8, -.108766694188792310088907e-8, .148932423311756107850131e-
9, -.202234050996159769398137e-10, .272378674685796939289343e-11, -.36
3935063906858345529170e-12, .482482116833264594538102e-13, .4108675651
60723338620743e-1, -.592327870598243335955849e-2, .8454822204722411309
58900e-3, -.119522457574092334793927e-3, .167382782198147614787699e-4,
 -.232271197136450540626629e-5, .319451110905734405614480e-6, -.435545
600413446504240501e-7, .588808072365721082477175e-8, -.789425019133218
566390345e-9, .104984912907564169278484e-9, -.138515928365736626424464
e-10, .181344197012665478252216e-11, -.235618639607612974870485e-12, .
303868316913896074025890e-13, .397261186802412061974146e-1, -.55410387
1070625327303776e-2, .765690751816049230207311e-3, -.10485026993707200
1803904e-3, .142311615943048717352186e-4, -.191496619036125281033561e-
5, .255518392950859824939367e-6, -.338149879340430426263298e-7, .44391
9040582776746621186e-8, -.578206934276910144737107e-9, .74734594603452
8551021109e-10, -.958714806574008245298996e-11, .122082637937808415336
261e-11, -.154340361040542460365035e-12, .193743851956446621509970e-13
, .384519509817188009789632e-1, -.519434499153280240490307e-2, .695556
434563128381580405e-3, -.923459521559392126171015e-4, .121584130070949
970443111e-4, -.158779541754925175230393e-5, .205708241547130738179895
e-6, -.264438861579628338025221e-7, .337356130760496459043383e-8, -.42
7180679021938041716426e-9, .536983641313281382296617e-10, -.6701944765
63269118375618e-11, .830600370305313868787873e-12, -.10223356070873205
7830154e-12, .124985938971819150865662e-13, .372563281850098346883087e
-1, -.487895519029758611587668e-2, .633671511890878321550410e-3, -.816
387684701812700439739e-4, .104352680861309569410926e-4, -.132361548248
576432873479e-5, .166626360231602217487811e-6, -.208218084860593056830
265e-7, .258316509576833532962510e-8, -.318205774671324409967160e-9, .
389266135083865565643239e-10, -.472961549601065502319688e-11, .5708227
88333991071422017e-12, -.684425869179535065469579e-13, .81536577966128
9786357902e-14, .361322579193383743121490e-1, -.4591237175328497452896
68e-2, .578865891813115720644028e-3, -.724294354776295316814370e-4, .8
99523977713967941984933e-5, -.110901963020481678748920e-5, .1357562591
01314006827212e-6, -.165020180155649426644860e-7, .1992189094219708670
83346e-8, -.238889795840624682602428e-9, .284572593793194263156558e-10
, -.336798136754916298887466e-11, .396075583102410108475733e-12, -.462
878442985689170197740e-13, .537629665793206734681040e-14, .35073548249
8683699378763e-1, -.432806732405437172981698e-2, .53016190260327728209
0787e-3, -.644748977364401869491282e-4, .778582604794197446593478e-5, \+
-.933710186525159068209011e-6, .111217144357845125536570e-6, -.1315951
97373437392253806e-7, .154693153974848038669845e-8, -.1806828074545842
76273078e-9, .209713864329678091691199e-10, -.241907884591329583932064
e-11, .277352235970374002617374e-12, -.316094249426567063331282e-13, .
358135774465285201962934e-14, .340746970537947237234627e-1, -.40867479
3661993844453913e-2, .486738575638957029010607e-3, -.57576638098500233
0931647e-4, .676530321833315804634577e-5, -.789721737346911453176454e-
6, .915925158699499785039562e-7, -.105559188540622696533035e-7, .12090
1402880422389591632e-8, -.137629990536950532435368e-9, .15573516757487
2024848356e-10, -.175184611604540559970530e-11, .195921936942421102370
054e-12, -.217865645442523363417404e-13, .240908620013967689191278e-14
, .331307991363432696861126e-1, -.386493979556219134155502e-2, .447903
267969726010891168e-3, -.515716384308902355181739e-4, .590031181018629
473067053e-5, -.670851559711016515390163e-6, .758077364561288415377975
e-7, -.851495992393449261303297e-8, .950776177777797424069170e-9, -.10
5546432896505265077050e-9, .116498370787001216599276e-10, -.1278636660
21070699998426e-11, .139561000837872588723359e-12, -.15149836198752721
6449162e-13, .163574206014779668137191e-14, .322374678791628749181758e
-1, -.366060679654612976512463e-2, .413068979267173818410259e-3, -.463
253427880163509971791e-4, .516402569275463857093409e-5, -.572238691719
665432962913e-6, .630418353481593109590838e-7, -.690534580621255964941
126e-8, .752120816802125193982160e-9, -.814656611776205630228600e-10, \+
.877574958950675310422299e-11, -.940271128160485545288892e-12, .100211
278491651320631700e-12, -.106245114115180236042165e-13, .1120632845123
19678076529e-14, .313907688487470210340656e-1, -.347197025470177631655
214e-2, .381736115344023967424054e-3, -.417261443107248001167086e-4, .
453475386270535735761388e-5, -.490050493183275771629678e-6, .526634561
960645310395967e-7, -.562856513781739077963517e-8, .598332958452697222
427653e-9, -.632675290585355867441576e-10, .665497120001102046527712e-
11, -.696421822477545631352637e-12, .725089991953261996587294e-13, -.7
51166579883254739774870e-14, .774347519808131271494220e-15, .305871632
994094591103796e-1, -.329747101085695818229976e-2, .353477745704746980
616613e-3, -.376810395334049865006033e-4, .399486549499071300973293e-5
, -.421247559590281828784327e-6, .441839784115254957146635e-7, -.46101
9677507032655051070e-8, .478558706554144587272576e-9, -.49424796272843
5228561927e-10, .507902336999683526659502e-11, -.519364136332537289943
274e-12, .528506041765450569771389e-13, -.535233332917004850841225e-14
, .539485330544100806924498e-15, .298234598952170088166498e-1, -.31357
3785819943878852925e-2, .327927622834355749804793e-3, -.34112182920231
4175114001e-4, .352995825274807520842343e-5, -.36340618438177471664365
0e-6, .372229526012341062590015e-7, -.379364878249523621876074e-8, .38
4735488575639572623668e-9, -.388290050968916094626051e-10, .3900033259
17592380115783e-11, -.389876147812208153377080e-12, .38793483483921567
0265151e-13, -.384230036485146366813934e-14, .378835071251161548265558
e-15, .290967733007319086389759e-1, -.298556111916576121737910e-2, .30
4770397225765571278607e-3, -.309541399850768841713903e-4, .31282108933
5649521809934e-5, -.314583397231753700811505e-6, .31482434508379471338
6598e-7, -.313561615787721666561815e-8, .310833635959190753985094e-9, \+
-.306698221694692246725122e-10, .301230841554661010546754e-11, -.29452
2557960839208518663e-12, .286677715825897672211384e-13, -.277811452498
694880218947e-14, .268047105092742720807230e-15, .28637603814818810708
3594e-1, -.289254070657916538406300e-2, .290707153199412470803501e-3, \+
-.290734726759849528451221e-4, .289356579447491178884808e-5, -.2866120
63973937932781129e-6, .282558753502275012472521e-7, -.2772706970244453
11084857e-8, .270836376141295565923431e-9, -.263356441836472481284136e
-10, .254941302688521661220478e-11, -.245708634307259187471724e-12, .2
35780878409829333408417e-13, -.225282796738857839015971e-14, .21433913
9464943524401904e-15]:\n" }{TEXT -1 26 "--------------------------" }
{MPLTEXT 1 0 960 "\nintExpATSqrBT :=\nproc(alpha::numeric, beta::numer
ic, y1::numeric, y2::numeric)::numeric;\nlocal bOver2a::numeric, aSqr:
:numeric, aSqry1b::numeric, aSqry2b::numeric, ay1bOver2a::numeric, \n \+
     ay2bOver2a::numeric, erfAB1::numeric, erfAB2::numeric, expAB1::nu
meric, \n      expAB2::numeric, intgr_prev_prev::numeric;\n   bOver2a \+
 := evalf[24]( 0.5 * beta / alpha );\n   aSqr     := evalf[24]( alpha^
2 );\n   aSqry1b  := evalf[24]( y1 * (aSqr * y1 + beta) );\n   aSqry2b
  := evalf[24]( y2 * (aSqr * y2 + beta) );\n   ay1bOver2a := evalf[24]
( alpha * y1 + bOver2a );\n   ay2bOver2a := evalf[24]( alpha * y2 + bO
ver2a );\n   erfAB1 := evalf[24]( erf(ay1bOver2a) );\n   erfAB2 := eva
lf[24]( erf(ay2bOver2a) );\n   expAB1 := evalf[24]( exp(-aSqry1b) );\n
   expAB2 := evalf[24]( exp(-aSqry2b) );\n   intgr_prev_prev := evalf[
24]( 0.5 * PiSqrt / alpha * exp(bOver2a^2) * (erfAB2 - erfAB1));\n   r
eturn evalf[24]( 0.5 / aSqr *(expAB1 - expAB2 - beta * intgr_prev_prev
) );\nend proc:\n" }{TEXT -1 26 "--------------------------" }
{MPLTEXT 1 0 3076 "\nisNoNeedOfRecur :=\nproc(b::numeric, m::numeric, \+
b2OverA::numeric, aSqr::numeric, \n     ba2::numeric, z1::numeric, z2:
:numeric, eps0_025::numeric)\n   if b >= 0\n     then if     z1 >= 0  \+
then\n             if evalf[24]( m * intExpATSqrBT(1, 0, z1, z2) ) <= \+
eps0_025\n               then return true\n               else return \+
false\n             fi\n          elif  (z1 < 0) and (z2 >= 0) and (-b
2OverA <= z1) then\n             if evalf[24]( m * (intExpATSqrBT(aSqr
, -ba2, 0, -z1) + intExpATSqrBT(1, 0, 0, z2)) ) <= eps0_025\n         \+
      then return true\n               else return false\n            \+
 fi\n          elif  (z1 < 0) and (z2 >= 0) and (z1 < -b2OverA ) then
\n             if evalf[24]( m * (intExpATSqrBT(1, 0, b2OverA, -z1) + \+
\n                                intExpATSqrBT(aSqr, -ba2, 0, b2OverA
) + \n                                intExpATSqrBT(1, 0, 0, z2)) ) <=
 eps0_025\n               then return true\n               else return
 false\n             fi\n          elif (-b2OverA <= z1) then\n       \+
      if evalf[24]( m * intExpATSqrBT(aSqr, -ba2, -z2, -z1) ) <= eps0_
025\n               then return true\n               else return false
\n             fi\n          elif (z1 < -b2OverA) and (-b2OverA < z2) \+
then\n             if evalf[24]( m * (intExpATSqrBT(1, 0, b2OverA, -z1
) + \n                                intExpATSqrBT(aSqr, -ba2, -z2, b
2OverA)) ) <= eps0_025\n               then return true\n             \+
  else return false\n             fi\n          else\n             if \+
evalf[24]( m * intExpATSqrBT(1, 0, -z2, -z1) ) <= eps0_025\n          \+
     then return true\n               else return false\n             \+
fi\n          fi\n     else if     z2 <= 0  then\n             if eval
f[24]( m * intExpATSqrBT(1, 0, -z2, -z1) ) <= eps0_025\n              \+
 then return true\n               else return false\n             fi\n
          elif   (z1 < 0) and (0 < z2) and (z2 <= b2OverA)  then\n    \+
         if evalf[24]( m * (intExpATSqrBT(1, 0, 0, -z1) + intExpATSqrB
T(aSqr, ba2, 0, z2)) ) <= eps0_025\n               then return true\n \+
              else return false\n             fi\n          elif  (z1 \+
< 0) and (b2OverA < z2)  then\n             if evalf[24]( m * (intExpA
TSqrBT(1, 0, 0, -z1) +\n                                intExpATSqrBT(
aSqr, ba2, 0, b2OverA) +\n                                intExpATSqrB
T(1, 0, b2OverA, z2)) ) <= eps0_025\n               then return true\n
               else return false\n             fi\n          elif  z2 \+
<= b2OverA  then\n             if evalf[24]( m * intExpATSqrBT(aSqr, b
a2, z1, z2) ) <= eps0_025\n               then return true\n          \+
     else return false\n             fi\n          elif  (z1 < b2OverA
) and (b2OverA < z2)  then\n             if evalf[24]( m * (intExpATSq
rBT(aSqr, ba2, z1, b2OverA) + intExpATSqrBT(1, 0, b2OverA, z2)) ) <= e
ps0_025\n               then return true\n               else return f
alse\n             fi\n          else\n             if evalf[24]( m * \+
intExpATSqrBT(1, 0, z1, z2) ) <= eps0_025\n               then return \+
true\n               else return false\n             fi\n          fi
\n   fi;\nend proc:\n" }{TEXT -1 26 "--------------------------" }
{MPLTEXT 1 0 252 "\nisPracticalZero := \nproc(a::numeric, b::numeric, \+
z1::numeric, z2::numeric, eps0_025::numeric)\n   if evalf[24]( erf(max
(abs(a * z1 + b), abs(a * z2 + b))) * (erf(z2) - erf(z1)) ) <= eps0_02
5\n     then return true\n     else return false\n   fi\nend proc:\n" 
}{TEXT -1 26 "--------------------------" }{MPLTEXT 1 0 112 "\ncondEps
 := \nproc(v::numeric, eps::numeric)\n   if eps < 1 then  evalf[24](ab
s(v)) > eps  else true fi\nend proc:\n" }{TEXT -1 26 "----------------
----------" }{MPLTEXT 1 0 4917 "\nErfExpIntStAfter0_5 := \nproc( iNum:
:posint, \n      low::numeric, up::numeric,\n      a::numeric, b::nume
ric, \n      alpha::numeric, alpha1::numeric, alpha1Sqr::numeric, inv2
aSqr::numeric, beta::numeric, \n      m::numeric, b2OverA::numeric, aS
qr::numeric, ba2::numeric, eps0_025::numeric,\n      epsilon::numeric,
\n      nIter::posint\n    )::numeric;\nlocal i::integer, indCondEpsFa
il::integer, indAdd::integer,\n      cond1, cond2, term_prev_prev_defi
ned, term_prev_defined,\n      y1::numeric, y2::numeric, z1::numeric, \+
z2::numeric, sh::numeric,\n      beta1::numeric, bsha::numeric, expMul
t::numeric, \n      val::numeric,  eps::numeric, epsSqr::numeric, \n  \+
    term_prev_prev::numeric, term_prev::numeric, term::numeric,\n     \+
 bOver2a::numeric, aSqry1b::numeric, aSqry2b::numeric, ay1bOver2a::num
eric, ay2bOver2a::numeric,\n      erfAB1::numeric, erfAB2::numeric, ex
pAB1::numeric, expAB2::numeric, \n      intgr_prev_prev::numeric, intg
r_prev::numeric, intgr::numeric,\n      sum::numeric, powy1::numeric, \+
powy2::numeric;\n   z1 := evalf[24]( alpha * low + beta );\n   z2 := e
valf[24]( alpha * up + beta );\n   if isPracticalZero(a, b, z1, z2, ep
s0_025)\n     then return  0\n   fi;\n   if isNoNeedOfRecur(b, m, b2Ov
erA, aSqr, ba2, z1, z2, eps0_025) \n     then return evalf[24]( erf(b)
 * (erf(z2) - erf(z1)) )\n   fi;\n   sh := shifts[iNum];\n   y1 :=eval
f[24]( low - sh );\n   y2 := evalf[24]( up - sh );\n   bsha    := eval
f[24]( beta + alpha * sh );\n   beta1   := evalf[24]( 2 * (sh + alpha \+
* bsha) );\n   expMult := evalf[24]( exp(-(sh^2 + bsha^2)) );\n   eps \+
   := evalf[24]( 0.25e-3 * epsilon / expMult ); \n   epsSqr := evalf[2
4]( eps^2 );\n   bOver2a  := evalf[24]( 0.5 * beta1 / alpha1 );\n   aS
qry1b  := evalf[24]( y1 * (alpha1Sqr * y1 + beta1) );\n   aSqry2b  := \+
evalf[24]( y2 * (alpha1Sqr * y2 + beta1) );\n   ay1bOver2a := evalf[24
]( alpha1 * y1 + bOver2a );\n   ay2bOver2a := evalf[24]( alpha1 * y2 +
 bOver2a );\n   erfAB1 := evalf[24]( erf(ay1bOver2a) );\n   erfAB2 := \+
evalf[24]( erf(ay2bOver2a) );\n   expAB1 := evalf[24]( exp(-aSqry1b) )
;\n   expAB2 := evalf[24]( exp(-aSqry2b) );\n   cond1 := false;\n   co
nd2 := false;\n   term_prev_prev_defined := false;\n   term_prev_defin
ed := false;\n   indAdd := nIter * (iNum - 1);\n   intgr_prev_prev := \+
evalf[24]( 0.5 * PiSqrt / alpha1 * exp(bOver2a^2) * (erfAB2 - erfAB1))
;\n   val := evalf[24]( coeffsErfc[indAdd + 1] * intgr_prev_prev );\n \+
  sum := val;\n   if condEps(val, epsSqr) \n     then term_prev_prev :
= val;\n          term_prev_prev_defined := true;\n          cond1:= e
valf[24]( abs(term_prev_prev) ) <= eps;\n   fi;\n   intgr_prev := eval
f[24]( 0.5 / alpha1Sqr *(expAB1 - expAB2 - beta1 * intgr_prev_prev) );
\n   val := evalf[24]( coeffsErfc[indAdd + 2] * intgr_prev );\n   if c
ondEps(val, epsSqr)\n     then sum := evalf[24]( sum + val );\n       \+
   if term_prev_prev_defined\n            then term_prev := val;\n    \+
             term_prev_defined := true;\n            else term_prev_pr
ev := val;\n                 term_prev_prev_defined := true;\n        \+
         cond1:= evalf[24]( abs(term_prev_prev) ) <= eps;\n          f
i\n   fi;\n   powy1 := 1;\n   powy2 := 1;\n   indCondEpsFail := 0:\n  \+
 for i from 2 to nIter - 1\n     do \n       if (indCondEpsFail >= 3) \+
\n         then return evalf[24]( erf(z2) -  erf(z1) - alpha * 4 / PiS
qrt * expMult * sum )\n       fi;\n       powy1 := evalf[24]( y1 * pow
y1 );\n       powy2 := evalf[24]( y2 * powy2 );\n       intgr := evalf
[24]( inv2aSqr * ( (i - 1) * intgr_prev_prev - beta1 * intgr_prev +\n \+
                                       expAB1 * powy1 - expAB2 * powy2
\n                                      )\n                         );
\n       intgr_prev_prev := intgr_prev;\n       intgr_prev := intgr;\n
       val := evalf[24]( coeffsErfc[indAdd + i + 1] * intgr );\n      \+
 if condEps(val, epsSqr)\n         then indCondEpsFail := 0;\n        \+
      sum := evalf[24]( sum + val );\n              if term_prev_prev_
defined\n                then if term_prev_defined\n                  \+
     then term := val;\n                            cond2 := evalf[24]
( 1 / 3 * (abs(term) + abs(term_prev) + abs(term_prev_prev)) ) <= eps;
\n                            if cond1 and cond2 \n                   \+
           then return evalf[24]( erf(z2) -  erf(z1) - alpha * 4 / PiS
qrt * expMult * sum )\n                            fi;\n              \+
              term_prev_prev := term_prev;\n                          \+
  term_prev := term;\n                            cond1:= evalf[24]( a
bs(term_prev_prev) ) <= eps;\n                       else term_prev :=
 val;\n                            term_prev_defined := true;\n       \+
              fi;\n                else term_prev_prev := val;\n      \+
               term_prev_prev_defined := true;\n                     c
ond1:= evalf[24]( abs(term_prev_prev) ) <= eps;\n              fi\n   \+
      else indCondEpsFail := indCondEpsFail + 1;\n       fi\n     od;
\n   return evalf[24]( erf(z2) - erf(z1) - alpha * 4 / PiSqrt * expMul
t * sum )\nend proc:\n" }{TEXT -1 26 "--------------------------" }
{MPLTEXT 1 0 2267 "\nErfExpIntStBefore0_5 := \nproc( low::numeric, up:
:numeric,\n      a::numeric, b::numeric, \n      alpha::numeric,  beta
::numeric,\n      m::numeric, b2OverA::numeric, aSqr::numeric, ba2::nu
meric, eps0_025::numeric\n    )::numeric;\nlocal i::integer, i2::integ
er,\n      z1::numeric, z2::numeric, alphaSqr::numeric, beta1::numeric
, inv2aSqr::numeric, \n      aSqry1b::numeric, aSqry2b::numeric, ay1bO
ver2a::numeric, ay2bOver2a::numeric,\n      erfAB1::numeric, erfAB2::n
umeric, expAB1::numeric, expAB2::numeric, \n      intgr_even::numeric,
 intgr_odd::numeric, sum::numeric, pLow::numeric, pUp::numeric;\n   z1
 := evalf[24]( alpha * low + beta );\n   z2 := evalf[24]( alpha * up +
 beta );\n   if isPracticalZero(a, b, z1, z2, eps0_025)\n     then ret
urn  0\n   fi;\n   if isNoNeedOfRecur(b, m, b2OverA, aSqr, ba2, z1, z2
, eps0_025) \n     then return evalf[24]( erf(b) * (erf(z2) - erf(z1))
 )\n   fi;\n   beta1  := evalf[24]( 2 * alpha * beta );\n   alphaSqr :
= evalf[24]( alpha^2 );\n   inv2aSqr := evalf[24]( 0.5 / alphaSqr );\n
   aSqry1b  := evalf[24]( low * (alphaSqr * low + beta1) );\n   aSqry2
b  := evalf[24]( up * (alphaSqr * up + beta1) );\n   ay1bOver2a := eva
lf[24]( alpha * low + beta );\n   ay2bOver2a := evalf[24]( alpha * up \+
+ beta );\n   erfAB1 := evalf[24]( erf(ay1bOver2a) );\n   erfAB2 := ev
alf[24]( erf(ay2bOver2a) );\n   expAB1 := evalf[24]( exp(-aSqry1b) );
\n   expAB2 := evalf[24]( exp(-aSqry2b) );\n   intgr_even := evalf[24]
( 0.5 * PiSqrt * a * exp(beta^2) * (erfAB2 - erfAB1));\n   intgr_odd  \+
:= evalf[24]( inv2aSqr * (expAB1 - expAB2 - beta1 * intgr_even) );\n  \+
 sum := intgr_odd;\n   pLow := 1;\n   pUp  := 1;\n   for i to 11\n    \+
 do\n       i2 := 2 * i;\n       pLow := evalf[24]( low * pLow );\n   \+
    pUp := evalf[24]( up * pUp );\n       intgr_even := evalf[24]( inv
2aSqr * ( (i2 - 1) * intgr_even - beta1 * intgr_odd +\n               \+
                               expAB1 * pLow - expAB2 * pUp ) );\n    \+
   pLow := evalf[24]( low * pLow );\n       pUp := evalf[24]( up * pUp
 );\n       intgr_odd := evalf[24]( inv2aSqr * ( i2 * intgr_odd - beta
1 * intgr_even +\n                                            expAB1 *
 pLow - expAB2 * pUp ) );\n       sum := evalf[24]( sum + coeffsErf[i]
 * intgr_odd );\n     od;\n   return evalf[24]( 4 / Pi * alpha * sum *
 exp(-beta^2) )\nend proc:\n" }{TEXT -1 26 "--------------------------
" }{MPLTEXT 1 0 2271 "\ngetPos :=\nproc(y::numeric)::integer;\n   if y
 <= .5 then return 0 fi;\n   if y > 10.0 then return 41 fi;\n   if (y \+
> .5) and (y <= .7375) then return 1 fi;\n   if (y > .7375) and (y <= \+
.975) then return 2 fi;\n   if (y > .975) and (y <= 1.2125) then retur
n 3 fi;\n   if (y > 1.2125) and (y <= 1.45) then return 4 fi;\n   if (
y > 1.45) and (y <= 1.6875) then return 5 fi;\n   if (y > 1.6875) and \+
(y <= 1.925) then return 6 fi;\n   if (y > 1.925) and (y <= 2.1625) th
en return 7 fi;\n   if (y > 2.1625) and (y <= 2.4) then return 8 fi;\n
   if (y > 2.4) and (y <= 2.6375) then return 9 fi;\n   if (y > 2.6375
) and (y <= 2.875) then return 10 fi;\n   if (y > 2.875) and (y <= 3.1
125) then return 11 fi;\n   if (y > 3.1125) and (y <= 3.35) then retur
n 12 fi;\n   if (y > 3.35) and (y <= 3.5875) then return 13 fi;\n   if
 (y > 3.5875) and (y <= 3.825) then return 14 fi;\n   if (y > 3.825) a
nd (y <= 4.0625) then return 15 fi;\n   if (y > 4.0625) and (y <= 4.3)
 then return 16 fi;\n   if (y > 4.3) and (y <= 4.5375) then return 17 \+
fi;\n   if (y > 4.5375) and (y <= 4.775) then return 18 fi;\n   if (y \+
> 4.775) and (y <= 5.0125) then return 19 fi;\n   if (y > 5.0125) and \+
(y <= 5.25) then return 20 fi;\n   if (y > 5.25) and (y <= 5.4875) the
n return 21 fi;\n   if (y > 5.4875) and (y <= 5.725) then return 22 fi
;\n   if (y > 5.725) and (y <= 5.9625) then return 23 fi;\n   if (y > \+
5.9625) and (y <= 6.2) then return 24 fi;\n   if (y > 6.2) and (y <= 6
.4375) then return 25 fi;\n   if (y > 6.4375) and (y <= 6.675) then re
turn 26 fi;\n   if (y > 6.675) and (y <= 6.9125) then return 27 fi;\n \+
  if (y > 6.9125) and (y <= 7.15) then return 28 fi;\n   if (y > 7.15)
 and (y <= 7.3875) then return 29 fi;\n   if (y > 7.3875) and (y <= 7.
625) then return 30 fi;\n   if (y > 7.625) and (y <= 7.8625) then retu
rn 31 fi;\n   if (y > 7.8625) and (y <= 8.1) then return 32 fi;\n   if
 (y > 8.1) and (y <= 8.3375) then return 33 fi;\n   if (y > 8.3375) an
d (y <= 8.575) then return 34 fi;\n   if (y > 8.575) and (y <= 8.8125)
 then return 35 fi;\n   if (y > 8.8125) and (y <= 9.05) then return 36
 fi;\n   if (y > 9.05) and (y <= 9.2875) then return 37 fi;\n   if (y \+
> 9.2875) and (y <= 9.525) then return 38 fi;\n   if (y > 9.525) and (
y <= 9.7625) then return 39 fi;\n   if (y > 9.7625) and (y <= 10.0) th
en return 40 fi;\nend proc:\n" }{TEXT -1 26 "-------------------------
-" }{MPLTEXT 1 0 3283 "\nErfExpIntPosBounds :=\nproc( sourceLow::numer
ic, sourceUp::numeric, low::numeric, up_::numeric,\n      a::numeric, \+
b::numeric, epsilon::numeric )::numeric;\nlocal m::numeric, b2OverA::n
umeric, aSqr::numeric, ba2::numeric, alpha::numeric, \n      beta::num
eric, eps0_025::numeric, up::numeric, alpha1::numeric, \n      alpha1S
qr::numeric, inv2aSqr::numeric, sum::numeric, \n      lowPos::integer,
 upPos::integer, i::integer;\n   m  := evalf[24]( 4 / Pi * exp(-b^2) *
 a );\n   b2OverA := evalf[24]( 2 * abs(b) / a);\n   aSqr := evalf[24]
( (1 + a^2)^(1/2) );\n   ba2  := evalf[24]( 2 * a * b );\n   alpha := \+
evalf[24]( a^(-1) );\n   beta  := evalf[24]( -b * alpha );\n   eps0_02
5 := evalf[24]( 0.25e-1 * epsilon );\n   if isPracticalZero(a, b, sour
ceLow, sourceUp, epsilon)\n     then return  0\n   fi;\n   if isNoNeed
OfRecur(b, m, b2OverA, aSqr, ba2, sourceLow, sourceUp, epsilon) \n    \+
 then return evalf[24]( erf(b) * (erf(sourceUp) - erf(sourceLow)) )\n \+
  fi;\n   lowPos := getPos(low);\n   upPos :=  getPos(up_);\n   if upP
os > nBounds \n     then upPos := nBounds;\n          up    := 10.0;\n
          if lowPos > nBounds \n            then return evalf[24]( erf
(sourceUp) - erf(sourceLow) )\n            else sum := evalf[24]( erf(
sourceUp) - erf(alpha * up + beta) );\n          fi\n     else up := u
p_;\n          sum := 0\n   fi;\n   if upPos = 0\n     then return Erf
ExpIntStBefore0_5( low, up, a, b, alpha, beta, m, b2OverA, aSqr, ba2, \+
eps0_025 )\n     else alpha1    := evalf[24]( (1 + alpha^2)^(1/2) );\n
          alpha1Sqr := evalf[24]( alpha1^2 );\n          inv2aSqr  := \+
evalf[24]( 0.5 / alpha1Sqr);\n          if lowPos = 0\n            the
n sum := evalf[24]( sum + ErfExpIntStBefore0_5( low, 0.5, a, b, alpha,
 \n                                                               beta
, m, b2OverA, aSqr, ba2, eps0_025 ) )\n            else if lowPos = up
Pos\n                   then sum := evalf[24]( sum + ErfExpIntStAfter0
_5( lowPos, low, up, a, b, alpha, alpha1, \n                          \+
                                           alpha1Sqr, inv2aSqr, beta, \+
m, b2OverA, \n                                                        \+
             aSqr, ba2, eps0_025, epsilon, nIter ) );\n               \+
         return sum\n                   else sum := evalf[24]( sum + E
rfExpIntStAfter0_5( lowPos, low, bounds[lowPos + 1], a, b, alpha,\n   \+
                                                                  alph
a1, alpha1Sqr, inv2aSqr, beta, m, b2OverA, \n                         \+
                                            aSqr, ba2, eps0_025, epsil
on, nIter ) );\n                 fi\n          fi;\n          for i fr
om lowPos + 1 to upPos - 1\n            do\n              sum := evalf
[24]( sum + ErfExpIntStAfter0_5( i, bounds[i], bounds[i + 1], a, b, al
pha,\n                                                           alpha
1, alpha1Sqr, inv2aSqr, beta, m, b2OverA,\n                           \+
                                aSqr, ba2, eps0_025, epsilon, nIter ) \+
)\n            od;\n          sum :=  evalf[24]( sum + ErfExpIntStAfte
r0_5( upPos, bounds[upPos], up, a, b, alpha,\n                        \+
                                alpha1, alpha1Sqr, inv2aSqr, beta, m, \+
b2OverA,\n                                                        aSqr
, ba2, eps0_025, epsilon, nIter ) );\n          return sum\n   fi;\nen
d proc:\n" }{TEXT -1 26 "--------------------------" }{MPLTEXT 1 0 
634 "\nErfExpIntSpecial :=\nproc( a::numeric, b::numeric, x::numeric )
::numeric;\nlocal low::numeric, up::numeric, q::numeric;\n   low := ev
alf[24]( -a * xT + b );\n   up  := evalf[24]( a * x + b );\n   if up <
= 0  \n     then return -ErfExpIntPosBounds( -x, xT, -up, -low, a, -b,
 epsHalf )\n     elif low < 0\n         then q := evalf[24](b / a);\n \+
             return evalf[24]( -ErfExpIntPosBounds( q, xT, 0, -low, a,
 -b, epsQuarter ) + \n                                 ErfExpIntPosBou
nds( -q, x, 0, up, a, b, epsQuarter )\n                              )
\n         else return ErfExpIntPosBounds( -xT, x, low, up, a, b, epsH
alf )\n   fi\nend proc:\n" }{TEXT -1 26 "--------------------------" }
{MPLTEXT 1 0 426 "\nErfExpInt :=\nproc( a::numeric, b::numeric, x::num
eric )::numeric;\n   if x <= -xT then return 0 fi;\n   if x > xT then \+
  return ErfExpInt(a, b, xT) fi;\n   if a = 0 then    return evalf[24]
( erf(b) * (1 + erf(x)) ) fi;\n   if a < 0 then    return -ErfExpInt(-
a, -b, x) fi;\n   if a > 1 then    return evalf[24]( erf(a * x + b) * \+
erf(x) - 1 - ErfExpInt(1 / a, -b / a, a * x + b) ) fi;\n   return ErfE
xpIntSpecial(a, b, x)\nend proc:\n" }{TEXT -1 26 "--------------------
------" }{MPLTEXT 1 0 12 "\nend module:" }}}{EXCHG {PARA 0 "> " 0 "" 
{MPLTEXT 1 0 0 "" }}}}{EXCHG }{SECT 1 {PARA 4 "" 0 "" {TEXT 365 7 "Tes
ting" }}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 193 "MakeTest :=\nproc( \+
a_diap::list(numeric), b_diap::list(numeric), x_diap::list(numeric), t
ry_::posint )\nlocal i, T, ind, a, b, lambda_a, lambda_b, lambda_x, x,
 xT, int1, int2, diff_, epsilon;\n   " }{TEXT -1 37 "-----------------
--------------------" }{MPLTEXT 1 0 286 "\n   if nops(a_diap) > 2 then
 error \"A wrong list for a-diapason with more then 2 elements\" fi;\n
   if nops(a_diap) < 2 then error \"A wrong list for a-diapason with l
ess then 2 elements\" fi;\n   if a_diap[1] >= a_diap[2] then error \"T
he 1st element in a-diapason must be < the 2nd\" fi;\n   " }{TEXT -1 
5 "-----" }{MPLTEXT 1 0 286 "\n   if nops(b_diap) > 2 then error \"A w
rong list for b-diapason with more then 2 elements\" fi;\n   if nops(b
_diap) < 2 then error \"A wrong list for b-diapason with less then 2 e
lements\" fi;\n   if b_diap[1] >= b_diap[2] then error \"The 1st eleme
nt in b-diapason must be < the 2nd\" fi;\n   " }{TEXT -1 5 "-----" }
{MPLTEXT 1 0 286 "\n   if nops(x_diap) > 2 then error \"A wrong list f
or x-diapason with more then 2 elements\" fi;\n   if nops(x_diap) < 2 \+
then error \"A wrong list for x-diapason with less then 2 elements\" f
i;\n   if x_diap[1] >= x_diap[2] then error \"The 1st element in x-dia
pason must be < the 2nd\" fi;\n   " }{TEXT -1 36 "--------------------
----------------" }{MPLTEXT 1 0 102 "\n   T := table([]);\n   ind := 0
;\n   epsilon := 0.2 * 10^(-8);\n   xT := 4.397571017214433973343322;
\n   " }{TEXT -1 25 "-------------------------" }{MPLTEXT 1 0 435 "\n \+
  for i to try_\n     do\n       lambda_a := evalf[24]( rand(1..10^10)
() / 10^10 );\n       lambda_b := evalf[24]( rand(1..10^10)() / 10^10 \+
);\n       lambda_x := evalf[24]( rand(1..10^10)() / 10^10 );\n       \+
a := evalf[24]( lambda_a * a_diap[1] + (1 - lambda_a) * a_diap[2] );\n
       b := evalf[24]( lambda_b * b_diap[1] + (1 - lambda_b) * b_diap[
2] );\n       x := evalf[24]( lambda_x * x_diap[1] + (1 - lambda_x) * \+
x_diap[2] );\n       " }{TEXT -1 36 "---------------------------------
---" }{MPLTEXT 1 0 66 "\n       int1 := ErfExpIntCalculator:-ErfExpInt
( a, b, x );\n       " }{TEXT -1 11 "-----------" }{MPLTEXT 1 0 118 "
\n       try\n           int2 := evalf[24]( 2 / Pi^(1/2) * Int( t -> e
rf(a * t + b) * exp(-t^2), -xT..x ) );\n           " }{TEXT -1 11 "---
--------" }{MPLTEXT 1 0 63 "\n           diff_ := evalf[24]( abs(int1 \+
- int2) );\n           " }{TEXT -1 35 "-------------------------------
----" }{MPLTEXT 1 0 409 "\n           if diff_ > epsilon\n            \+
 then ind := ind + 1;\n                  T[ind] :=  table([\"a\" = a, \+
\"b\" = b, \"x\" = x, \"intMy\" = int1, \"intMaple\" = int2, \"differ
\" = diff_])\n                            \n           fi;\n          \+
 catch: print(\"Strange error\");\n                  return table([\"a
\" = a, \"b\" = b, \"x\" = x, \"intMy\" = int1, \"intMaple\" = int2, \+
\"differ\" = diff_])\n       end try;\n     od;\n   " }{TEXT -1 25 "--
-----------------------" }{MPLTEXT 1 0 37 "\n   return convert(T, list
)\nend proc:" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 0 "" }}}{EXCHG 
{PARA 0 "> " 0 "" {MPLTEXT 1 0 88 "randomize:\ntv := time():\nL:= Make
Test( [-10, 10], [-10, 10], [-10, 10], 5);\ntime() - tv;" }}{PARA 11 "
" 1 "" {XPPMATH 20 "6#>%\"LG7\"" }}{PARA 11 "" 1 "" {XPPMATH 20 "6#$\"
%nJ!\"$" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 90 "randomize:\ntv :
= time():\nL:= MakeTest( [-10, 10], [-10, 10], [-10, 10], 100);\ntime(
) - tv;" }}{PARA 11 "" 1 "" {XPPMATH 20 "6#>%\"LG7\"" }}{PARA 11 "" 1 
"" {XPPMATH 20 "6#$\"&ke'!\"$" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 
0 0 "" }}}}{EXCHG }{SECT 1 {PARA 3 "" 0 "" {TEXT -1 28 "module  ErfExp
IntCalculator1" }}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 53 "ErfExpIntC
alculator1 := \nmodule()\nexport ErfExpInt; \n" }{TEXT -1 54 "--------
----------------------------------------------" }{MPLTEXT 1 0 324 "\nl
ocal PiSqrt::numeric, epsHalf::numeric, epsQuarter::numeric, xT::numer
ic, \n      nIter::integer, nBounds::integer, \n      bounds, shifts, \+
coeffsErf, coeffsErfc, \n      intExpATSqrBT, isNoNeedOfRecur, isPract
icalZero, condEps, ErfExpIntStAfter0_5, \n      ErfExpIntStBefore0_5, \+
getPos, ErfExpIntPosBounds, ErfExpIntSpecial;\n" }{TEXT -1 44 "=======
=====================================" }{MPLTEXT 1 0 191 "\n   PiSqrt \+
 := 1.77245385090551602729816748334;\n   epsHalf := 0.5 * 10^(-9);\n  \+
 epsQuarter := 0.25 * 10^(-9);\n   xT      := 4.3975710172144339733433
22;\n   nIter   := 15;\n   nBounds := 40:\n   " }{TEXT -1 26 "--------
------------------" }{MPLTEXT 1 0 355 "\n   bounds := [0.5, 0.7375, 0.
975, 1.2125, 1.45, 1.6875, 1.925, 2.1625, 2.4, 2.6375, 2.875, 3.1125, \+
3.35, \n              3.5875, 3.825, 4.0625, 4.3, 4.5375, 4.775, 5.012
5, 5.25, 5.4875, 5.725, 5.9625, 6.2, 6.4375, \n              6.675, 6.
9125, 7.15, 7.3875, 7.625, 7.8625, 8.1, 8.3375, 8.575, 8.8125, 9.05, 9
.2875, 9.525, \n              9.7625, 10.0];\n   " }{TEXT -1 26 "-----
---------------------" }{MPLTEXT 1 0 1261 "\n   shifts := [0.618750000
014551915228367, 0.856249999997089616954325, 1.09374999997962731868027
,\n              1.33124999999781721271575, 1.56875000001600710675121,
 1.80624999999854480847715, \n              2.04374999998108251020312,
 2.28125000003492459654809, 2.51875000001746229827404, \n             \+
 2.75625, 2.99375000000036379788071, 3.23125000000072759576141, 3.4687
5000001891748979688,\n              3.70625000000145519152285, 3.94374
999998399289324879, 4.18125000000218278728425, \n              4.41875
000002037268131972, 4.65625000000291038304568, 4.893749999985448084771
63, \n              5.13125000000363797880709, 5.368749999950523488223
54, 5.60625000000436557456851, \n              5.843749999986903276294
47, 6.08125000004074536263943, 6.31874999998763087205588, \n          \+
    6.55625000000582076609136, 6.79374999998835846781731, 7.0312499999
7089616954326, \n              7.26874999995343387126923, 7.5062500000
0727595761418, 7.74374999991850927472115, \n              7.9812499999
7235136106611, 8.21875000002619344741106, 8.45625000000873114913701, \+
\n              8.69374999999126885086299, 8.93125000011641532182694, \+
9.16875000009895302355289, \n              9.40624999993888195604085, \+
9.64375000006402842700482, 9.79999999992869561538101];\n   " }{TEXT 
-1 26 "--------------------------" }{MPLTEXT 1 0 378 "\n   coeffsErf :
= [-.333333333333333333333333, .1, -.238095238095238095238095e-1, .462
962962962962962962963e-2,\n                 -.757575757575757575757576
e-3, .106837606837606837606838e-3, -.132275132275132275132275e-4,\n   \+
               .145891690009337068160598e-5, -.14503852223150468764503
9e-6, .131225329638028050726463e-7,\n                 -.10892221037148
5733804574e-8]:\n" }{TEXT -1 26 "--------------------------" }
{MPLTEXT 1 0 18370 "\ncoeffsErfc := [.279763689203807902590448, -.2179
82018149901814442494, .144887315470384083801509, -.8555532780032874231
44249e-1, .459749781963432104545924e-1, -.228433240162709044609932e-1,
 .106135571536455474504835e-1, -.465033872206882830464019e-2, .1934040
01731822800336980e-2, -.767478102576552961543818e-3, .2918325883627893
77287746e-3, -.106710306971151306198947e-3, .376342640642080067866884e
-4, -.128344775551091464485034e-4, .424184727284258099165650e-5, .2351
50109394083386202506, -.161495021211757238879551, .9686999748198626066
50986e-1, -.523667239120590745645659e-1, .260154950662190722750939e-1,
 -.120363825046725479344295e-1, .523644751554204805915213e-2, -.215790
694843627437380231e-2, .847184922743831938900050e-3, -.318334412951553
823377704e-3, .114922216307249727382316e-3, -.399876845905263025664474
e-4, .134471269317238940638566e-4, -.438055113363956245314393e-5, .138
518285645882572011403e-5, .201632118166514805327476, -.123119325066720
727819762, .669703563772972898672616e-1, -.332469985202773298161581e-1
, .153032258732105602932743e-1, -.660363808870709874409653e-2, .269349
890460771744994932e-2, -.104503533195247386246820e-2, .387622877574061
798639728e-3, -.138016179920842979394919e-3, .473335361646699804631983
e-4, -.156809317671394319059619e-4, .503041949790163397729984e-5, -.15
6598621842161427392112e-5, .473946014629587440373476e-6, .175767574424
705900794699, -.962084166427441463333244e-1, .476901197692627498604542
e-1, -.218139631333449728249777e-1, .932514067402240242288066e-2, -.37
5994784442808661954893e-2, .143990336871232264664505e-2, -.52659328138
3983482145687e-3, .184719015717114948320699e-3, -.62374687042165092253
7191e-4, .203365427178848345497178e-4, -.641848446734029580193805e-5, \+
.196532254728973261986751e-5, -.584945972109361593510452e-6, .16951617
2756145843176127e-6, .155342931858314743410168, -.76801134837320609848
7691e-1, .348611515810386564452705e-1, -.147418021960052330387184e-1, \+
.586747469291014854664445e-2, -.221488050856436457328993e-2, .79762696
5019582932864956e-3, -.275315202048980446357480e-3, .91431560453334958
0528116e-4, -.293070981320953405677930e-4, .909121004925856790121907e-
5, -.273550224694010709185540e-5, .799981817231186159595428e-6, -.2277
73965752852161337859e-6, .632373442685973990075179e-7, .13888868779076
4631842534, -.624541989040232537543967e-1, .260807910204636184979627e-
1, -.102305134155660077850431e-1, .380096308180512070716896e-2, -.1346
00953962478531207854e-2, .456577783622729224414301e-3, -.1489474051285
64812312443e-3, .468853832745387955706811e-4, -.1428015146633351491381
10e-4, .421837193935990310102612e-5, -.121103948120113407710649e-5, .3
38488645321992395264238e-6, -.922529793114557575258214e-7, .2455095755
04006254537284e-7, .125401034576743618719275, -.5161285472006129495502
53e-1, .199172627435944685002289e-1, -.727129932547847696019234e-2, .2
52827237364370055733109e-2, -.841657064753459808326050e-3, .2693785825
23739951194803e-3, -.831755962119602111258864e-4, .2484711443927501560
62058e-4, -.719873468154425674244479e-5, .202694008816737504237646e-5,
 -.555668341880557725050606e-6, .148548818877887854086856e-6, -.387802
602925680859362187e-7, .989880880889018260994593e-8, .1141764829880663
48064658, -.432593799067285590257363e-1, .154910225743310770306609e-1,
 -.528032310566134474814446e-2, .172264274468127761164783e-2, -.540217
737721021548480547e-3, .163423676820817283499025e-3, -.478307071370601
835367301e-4, .135774690447802467795754e-4, -.374602352536472652834170
e-5, .100637057490607914557377e-5, -.263680118998243182080001e-6, .674
750507784290471347143e-7, -.168850244816296750792458e-7, .413658405042
844300439286e-8, .104710533065329465531565, -.367102732275018248305739
e-1, .122465323729198594802995e-1, -.390954654199631967863280e-2, .119
968101009232138365815e-2, -.355139999135538749051760e-3, .101724045750
322172201738e-3, -.282635882478562999051125e-4, .763378322101222498410
164e-5, -.200799927934397226302790e-5, .515227005955555651382232e-6, -
.129140228719681229813069e-6, .316591759797629508793424e-7, -.75997968
4803901494712947e-8, .178816965906717441962472e-8, .966338157090799532
204839e-1, -.314956744514523544236022e-1, .982386300226269522964336e-2
, -.294576803432326762095069e-2, .852294928809538613927733e-3, -.23865
2054718798025486066e-3, .648367343547189884254980e-4, -.17127373019334
6149095463e-4, .440735312427421279847659e-5, -.11065791065124246209435
2e-5, .271468891626292094422575e-6, -.651532676973777073633971e-7, .15
3150329502270617367515e-7, -.352941667297326651436110e-8, .79815404300
7415390520042e-9, .896707996925723396816592e-1, -.27285670388417396729
4115e-1, .798432396722158254719476e-2, -.225506700771997224137435e-2, \+
.616608556440583641435521e-3, -.163638056684256007801919e-3, .42239041
4872996572442479e-4, -.106242646051312410745962e-4, .26081623327224390
4844875e-5, -.625795252061499683425447e-6, .146937559368885115693927e-
6, -.338001695137907923991406e-7, .762471693491375842054800e-8, -.1688
25742457463699093242e-8, .367213759774200447824737e-9, .83612454121292
6360578311e-1, -.238440987887938524387347e-1, .65662099099688376782885
0e-2, -.175135534475389497402967e-2, .453571476282495242779158e-3, -.1
14301004597487053207733e-3, .280787851851606334307356e-4, -.6734694247
11534795199380e-5, .157932609550691560284123e-5, -.3625548468828760391
69761e-6, .815641497584507208330573e-7, -.180001249874216486519289e-7,
 .390020759709145311661892e-8, -.830396793636643319597591e-9, .1738554
25017520361387377e-9, .782977554405582025274504e-1, -.2099890517592108
87901292e-1, .545780311129315915069026e-2, -.137810042198578638515504e
-2, .338758636786096306178606e-3, -.812125598314915052195364e-4, .1901
75234559277801732602e-4, -.435586436622154807945650e-5, .9770297261594
74185003204e-6, -.214842779539835270513730e-6, .4635876747070248500761
42e-7, -.982469181489432828288530e-8, .204656125972507319833835e-8, -.
419335752849811623327024e-9, .845700522541319667177350e-10, .736009276
529220128989519e-1, -.186227073201087536307160e-1, .458051864835246187
545377e-2, -.109744005194625023036244e-2, .256565729092018363499654e-3
, -.586173267282217756330814e-4, .131050874843962016727347e-4, -.28704
5606651402898777216e-5, .616614913488914402626699e-6, -.13002823166600
1906680158e-6, .269395563877477237583590e-7, -.54879093090496742428197
4e-8, .109999874363933715663981e-8, -.217082912094800687005601e-9, .42
2050277085792011206807e-10, .694224769539922269856357e-1, -.1661979657
46566855985837e-1, .387815421488441465418955e-2, -.8835505904800900489
05034e-3, .196825788976369378131666e-3, -.429275531557478768284941e-4,
 .917675057903690123272922e-5, -.192478374468150964450747e-5, .3964711
64321591812499999e-6, -.802667969225110984480320e-7, .1598379700438326
90628208e-7, -.313285416365530040532703e-8, .604767237120756009712524e
-9, -.115046670092847122892678e-9, .215788465980360116124780e-10, .656
827862961665866107025e-1, -.149172831435656847430908e-1, .330989615680
446879413408e-2, -.718519886656621887961226e-3, .152792443729530166255
026e-3, -.318625913722131057925377e-4, .652232799187187404314068e-5, -
.131174501223506557235708e-5, .259398535089484843082689e-6, -.50474418
1884806965349463e-7, .967047484753139966060660e-8, -.18254082790511094
3048955e-8, .339664422127479609841129e-9, -.623363709637226692909325e-
10, .112886382580892026769294e-10, .623174679136732228796694e-1, -.134
589608525899811509582e-1, .284568465579165585903681e-2, -.589727843992
569403244977e-3, .119912377413350632234592e-3, -.239460091976175628330
945e-4, .470031651673624242565690e-5, -.907567342513016569086443e-6, .
172500828347621333568879e-6, -.322954004291890260494408e-7, .595910546
880271304799286e-8, -.108429151005996714136611e-8, .194648734618072496
009384e-9, -.344903719679723799019591e-10, .603491461346992525454058e-
11, .592739430645250250808234e-1, -.122009887470052665672892e-1, .2463
08922937905759290774e-2, -.488153000590205745060366e-3, .9506341666598
17717377381e-4, -.182055852808165996499976e-4, .3431220106298636892291
77e-5, -.636847650527969066176431e-6, .116474558521956489981197e-6, -.
210028851502150011288731e-7, .373597478558146108682318e-8, -.655864111
058153630948035e-9, .113684592218957837556762e-9, -.194646513931584122
850041e-10, .329318701806410466162400e-11, .565088916228594079134584e-
1, -.111088067672038092386732e-1, .214516853689576139844340e-2, -.4072
58805032696619226338e-3, .760728880602422568969490e-4, -.1399084220416
60588786794e-4, .253506799295790211834979e-5, -.4528152350728287572006
53e-6, .797758609077226330992465e-7, -.138693584239183044219786e-7, .2
38053749333423449075807e-8, -.403564191089456579773348e-9, .6759920883
40939366524334e-10, -.111923950248501583502571e-10, .18323465855839797
6227330e-11, .539863269947951357222979e-1, -.101549027210514117821879e
-1, .187898245651821672806016e-2, -.342249297290310973660998e-3, .6140
78847448091183063961e-4, -.108600341025479467653516e-4, .1894111522071
52863367069e-5, -.325964128022375255092348e-6, .5537702539667688134957
98e-7, -.929128109556134669076124e-8, .154022774093710224058878e-8, -.
252361354417683732333008e-9, .408830915407822297129674e-10, -.65507683
5087803841456027e-11, .103849456184662784972537e-11, .5167612651542317
95375548e-1, -.931717502230070501015018e-2, .165454318899809784993182e
-2, -.289564144122580891452810e-3, .499728565411098376513639e-4, -.850
894697267537669053026e-5, .143014905794263035267388e-5, -.237381225793
011338769578e-6, .389271538093809856600323e-7, -.630912629619377981567
228e-8, .101100631467260344696338e-8, -.160233833275712969821471e-9, .
251251538365705136655481e-10, -.389894854517093685884486e-11, .5989534
62577493524091114e-12, .495528976964549205009114e-1, -.857771801198721
449394718e-2, .146406619845681232562163e-2, -.246531206223128674250264
e-3, .409753245924374538747230e-4, -.672531600367637789748513e-5, .109
050711713799863008480e-5, -.174760150934699265269770e-6, .276895085719
587288047940e-7, -.433907640607793351964128e-8, .672712235970297473052
255e-9, -.103215159210994934257112e-9, .156770410792668046837033e-10, \+
-.235780746788087960216582e-11, .351226176612964748409551e-12, .475950
949776343225563482e-1, -.792191082391204646964188e-2, .130142874855391
912709378e-2, -.211124318601645067977477e-3, .338355198462225551177318
e-4, -.535919891561440954185889e-5, .839233577299422272735550e-6, -.12
9979350565815195207735e-6, .199166899107363125082639e-7, -.30202654905
9476415314971e-8, .453402656863866830148770e-9, -.67398848667134715831
8478e-10, .992343838589768525025566e-11, -.144750089512645337325368e-1
1, .209229312846763415631692e-12, .457843252971774362586463e-1, -.7337
72686112270237509080e-2, .116177402148687944901196e-2, -.1817923170881
99418959275e-3, .281247614955883203756551e-4, -.4303443833981768744466
53e-5, .651481067214555524192516e-6, -.976070296533949716475544e-7, .1
44770821353060190497573e-7, -.212628332684575178626627e-8, .3093243169
28314985538820e-9, -.445826891035086097695317e-10, .636763901880262619
010601e-11, -.901459104670334719933628e-12, .126520130897063046745187e
-12, .441047974505794118306810e-1, -.681520540269430977076922e-2, .104
121857203058839588453e-2, -.157336941120624493157588e-3, .235229032168
781560401890e-4, -.348063813358066905822038e-5, .509873509834097313155
377e-6, -.739642535902303688073711e-7, .106279726951985464968587e-7, -
.151305605477724533853489e-8, .213469949534180027391776e-9, -.29853234
2259426992849635e-10, .413913695354515017737633e-11, -.569086508850304
967140277e-12, .776030859866351500234933e-13, .42542881940856105444922
5e-1, -.634604359347839616974949e-2, .936633962061226730935816e-3, -.1
36824678822602175732373e-3, .197885966995751499207118e-4, -.2834276475
23086351149538e-5, .402123698396130400382871e-6, -.5652941708407138501
52956e-7, .787567846296072831304930e-8, -.108766694188792310088907e-8,
 .148932423311756107850131e-9, -.202234050996159769398137e-10, .272378
674685796939289343e-11, -.363935063906858345529170e-12, .4824821168332
64594538102e-13, .410867565160723338620743e-1, -.592327870598243335955
849e-2, .845482220472241130958900e-3, -.119522457574092334793927e-3, .
167382782198147614787699e-4, -.232271197136450540626629e-5, .319451110
905734405614480e-6, -.435545600413446504240501e-7, .588808072365721082
477175e-8, -.789425019133218566390345e-9, .104984912907564169278484e-9
, -.138515928365736626424464e-10, .181344197012665478252216e-11, -.235
618639607612974870485e-12, .303868316913896074025890e-13, .39726118680
2412061974146e-1, -.554103871070625327303776e-2, .76569075181604923020
7311e-3, -.104850269937072001803904e-3, .142311615943048717352186e-4, \+
-.191496619036125281033561e-5, .255518392950859824939367e-6, -.3381498
79340430426263298e-7, .443919040582776746621186e-8, -.5782069342769101
44737107e-9, .747345946034528551021109e-10, -.958714806574008245298996
e-11, .122082637937808415336261e-11, -.154340361040542460365035e-12, .
193743851956446621509970e-13, .384519509817188009789632e-1, -.51943449
9153280240490307e-2, .695556434563128381580405e-3, -.92345952155939212
6171015e-4, .121584130070949970443111e-4, -.158779541754925175230393e-
5, .205708241547130738179895e-6, -.264438861579628338025221e-7, .33735
6130760496459043383e-8, -.427180679021938041716426e-9, .53698364131328
1382296617e-10, -.670194476563269118375618e-11, .830600370305313868787
873e-12, -.102233560708732057830154e-12, .124985938971819150865662e-13
, .372563281850098346883087e-1, -.487895519029758611587668e-2, .633671
511890878321550410e-3, -.816387684701812700439739e-4, .104352680861309
569410926e-4, -.132361548248576432873479e-5, .166626360231602217487811
e-6, -.208218084860593056830265e-7, .258316509576833532962510e-8, -.31
8205774671324409967160e-9, .389266135083865565643239e-10, -.4729615496
01065502319688e-11, .570822788333991071422017e-12, -.68442586917953506
5469579e-13, .815365779661289786357902e-14, .361322579193383743121490e
-1, -.459123717532849745289668e-2, .578865891813115720644028e-3, -.724
294354776295316814370e-4, .899523977713967941984933e-5, -.110901963020
481678748920e-5, .135756259101314006827212e-6, -.165020180155649426644
860e-7, .199218909421970867083346e-8, -.238889795840624682602428e-9, .
284572593793194263156558e-10, -.336798136754916298887466e-11, .3960755
83102410108475733e-12, -.462878442985689170197740e-13, .53762966579320
6734681040e-14, .350735482498683699378763e-1, -.4328067324054371729816
98e-2, .530161902603277282090787e-3, -.644748977364401869491282e-4, .7
78582604794197446593478e-5, -.933710186525159068209011e-6, .1112171443
57845125536570e-6, -.131595197373437392253806e-7, .1546931539748480386
69845e-8, -.180682807454584276273078e-9, .209713864329678091691199e-10
, -.241907884591329583932064e-11, .277352235970374002617374e-12, -.316
094249426567063331282e-13, .358135774465285201962934e-14, .34074697053
7947237234627e-1, -.408674793661993844453913e-2, .48673857563895702901
0607e-3, -.575766380985002330931647e-4, .676530321833315804634577e-5, \+
-.789721737346911453176454e-6, .915925158699499785039562e-7, -.1055591
88540622696533035e-7, .120901402880422389591632e-8, -.1376299905369505
32435368e-9, .155735167574872024848356e-10, -.175184611604540559970530
e-11, .195921936942421102370054e-12, -.217865645442523363417404e-13, .
240908620013967689191278e-14, .331307991363432696861126e-1, -.38649397
9556219134155502e-2, .447903267969726010891168e-3, -.51571638430890235
5181739e-4, .590031181018629473067053e-5, -.670851559711016515390163e-
6, .758077364561288415377975e-7, -.851495992393449261303297e-8, .95077
6177777797424069170e-9, -.105546432896505265077050e-9, .11649837078700
1216599276e-10, -.127863666021070699998426e-11, .139561000837872588723
359e-12, -.151498361987527216449162e-13, .163574206014779668137191e-14
, .322374678791628749181758e-1, -.366060679654612976512463e-2, .413068
979267173818410259e-3, -.463253427880163509971791e-4, .516402569275463
857093409e-5, -.572238691719665432962913e-6, .630418353481593109590838
e-7, -.690534580621255964941126e-8, .752120816802125193982160e-9, -.81
4656611776205630228600e-10, .877574958950675310422299e-11, -.940271128
160485545288892e-12, .100211278491651320631700e-12, -.1062451141151802
36042165e-13, .112063284512319678076529e-14, .313907688487470210340656
e-1, -.347197025470177631655214e-2, .381736115344023967424054e-3, -.41
7261443107248001167086e-4, .453475386270535735761388e-5, -.49005049318
3275771629678e-6, .526634561960645310395967e-7, -.56285651378173907796
3517e-8, .598332958452697222427653e-9, -.632675290585355867441576e-10,
 .665497120001102046527712e-11, -.696421822477545631352637e-12, .72508
9991953261996587294e-13, -.751166579883254739774870e-14, .774347519808
131271494220e-15, .305871632994094591103796e-1, -.32974710108569581822
9976e-2, .353477745704746980616613e-3, -.376810395334049865006033e-4, \+
.399486549499071300973293e-5, -.421247559590281828784327e-6, .44183978
4115254957146635e-7, -.461019677507032655051070e-8, .47855870655414458
7272576e-9, -.494247962728435228561927e-10, .507902336999683526659502e
-11, -.519364136332537289943274e-12, .528506041765450569771389e-13, -.
535233332917004850841225e-14, .539485330544100806924498e-15, .29823459
8952170088166498e-1, -.313573785819943878852925e-2, .32792762283435574
9804793e-3, -.341121829202314175114001e-4, .352995825274807520842343e-
5, -.363406184381774716643650e-6, .372229526012341062590015e-7, -.3793
64878249523621876074e-8, .384735488575639572623668e-9, -.3882900509689
16094626051e-10, .390003325917592380115783e-11, -.38987614781220815337
7080e-12, .387934834839215670265151e-13, -.384230036485146366813934e-1
4, .378835071251161548265558e-15, .290967733007319086389759e-1, -.2985
56111916576121737910e-2, .304770397225765571278607e-3, -.3095413998507
68841713903e-4, .312821089335649521809934e-5, -.3145833972317537008115
05e-6, .314824345083794713386598e-7, -.313561615787721666561815e-8, .3
10833635959190753985094e-9, -.306698221694692246725122e-10, .301230841
554661010546754e-11, -.294522557960839208518663e-12, .2866777158258976
72211384e-13, -.277811452498694880218947e-14, .26804710509274272080723
0e-15, .286376038148188107083594e-1, -.289254070657916538406300e-2, .2
90707153199412470803501e-3, -.290734726759849528451221e-4, .2893565794
47491178884808e-5, -.286612063973937932781129e-6, .2825587535022750124
72521e-7, -.277270697024445311084857e-8, .270836376141295565923431e-9,
 -.263356441836472481284136e-10, .254941302688521661220478e-11, -.2457
08634307259187471724e-12, .235780878409829333408417e-13, -.22528279673
8857839015971e-14, .214339139464943524401904e-15]:\n" }{TEXT -1 26 "--
------------------------" }{MPLTEXT 1 0 960 "\nintExpATSqrBT :=\nproc(
alpha::numeric, beta::numeric, y1::numeric, y2::numeric)::numeric;\nlo
cal bOver2a::numeric, aSqr::numeric, aSqry1b::numeric, aSqry2b::numeri
c, ay1bOver2a::numeric, \n      ay2bOver2a::numeric, erfAB1::numeric, \+
erfAB2::numeric, expAB1::numeric, \n      expAB2::numeric, intgr_prev_
prev::numeric;\n   bOver2a  := evalf[24]( 0.5 * beta / alpha );\n   aS
qr     := evalf[24]( alpha^2 );\n   aSqry1b  := evalf[24]( y1 * (aSqr \+
* y1 + beta) );\n   aSqry2b  := evalf[24]( y2 * (aSqr * y2 + beta) );
\n   ay1bOver2a := evalf[24]( alpha * y1 + bOver2a );\n   ay2bOver2a :
= evalf[24]( alpha * y2 + bOver2a );\n   erfAB1 := evalf[24]( erf(ay1b
Over2a) );\n   erfAB2 := evalf[24]( erf(ay2bOver2a) );\n   expAB1 := e
valf[24]( exp(-aSqry1b) );\n   expAB2 := evalf[24]( exp(-aSqry2b) );\n
   intgr_prev_prev := evalf[24]( 0.5 * PiSqrt / alpha * exp(bOver2a^2)
 * (erfAB2 - erfAB1));\n   return evalf[24]( 0.5 / aSqr *(expAB1 - exp
AB2 - beta * intgr_prev_prev) );\nend proc:\n" }{TEXT -1 26 "---------
-----------------" }{MPLTEXT 1 0 3076 "\nisNoNeedOfRecur :=\nproc(b::n
umeric, m::numeric, b2OverA::numeric, aSqr::numeric, \n     ba2::numer
ic, z1::numeric, z2::numeric, eps0_025::numeric)\n   if b >= 0\n     t
hen if     z1 >= 0  then\n             if evalf[24]( m * intExpATSqrBT
(1, 0, z1, z2) ) <= eps0_025\n               then return true\n       \+
        else return false\n             fi\n          elif  (z1 < 0) a
nd (z2 >= 0) and (-b2OverA <= z1) then\n             if evalf[24]( m *
 (intExpATSqrBT(aSqr, -ba2, 0, -z1) + intExpATSqrBT(1, 0, 0, z2)) ) <=
 eps0_025\n               then return true\n               else return
 false\n             fi\n          elif  (z1 < 0) and (z2 >= 0) and (z
1 < -b2OverA ) then\n             if evalf[24]( m * (intExpATSqrBT(1, \+
0, b2OverA, -z1) + \n                                intExpATSqrBT(aSq
r, -ba2, 0, b2OverA) + \n                                intExpATSqrBT
(1, 0, 0, z2)) ) <= eps0_025\n               then return true\n       \+
        else return false\n             fi\n          elif (-b2OverA <
= z1) then\n             if evalf[24]( m * intExpATSqrBT(aSqr, -ba2, -
z2, -z1) ) <= eps0_025\n               then return true\n             \+
  else return false\n             fi\n          elif (z1 < -b2OverA) a
nd (-b2OverA < z2) then\n             if evalf[24]( m * (intExpATSqrBT
(1, 0, b2OverA, -z1) + \n                                intExpATSqrBT
(aSqr, -ba2, -z2, b2OverA)) ) <= eps0_025\n               then return \+
true\n               else return false\n             fi\n          els
e\n             if evalf[24]( m * intExpATSqrBT(1, 0, -z2, -z1) ) <= e
ps0_025\n               then return true\n               else return f
alse\n             fi\n          fi\n     else if     z2 <= 0  then\n \+
            if evalf[24]( m * intExpATSqrBT(1, 0, -z2, -z1) ) <= eps0_
025\n               then return true\n               else return false
\n             fi\n          elif   (z1 < 0) and (0 < z2) and (z2 <= b
2OverA)  then\n             if evalf[24]( m * (intExpATSqrBT(1, 0, 0, \+
-z1) + intExpATSqrBT(aSqr, ba2, 0, z2)) ) <= eps0_025\n               \+
then return true\n               else return false\n             fi\n \+
         elif  (z1 < 0) and (b2OverA < z2)  then\n             if eval
f[24]( m * (intExpATSqrBT(1, 0, 0, -z1) +\n                           \+
     intExpATSqrBT(aSqr, ba2, 0, b2OverA) +\n                         \+
       intExpATSqrBT(1, 0, b2OverA, z2)) ) <= eps0_025\n              \+
 then return true\n               else return false\n             fi\n
          elif  z2 <= b2OverA  then\n             if evalf[24]( m * in
tExpATSqrBT(aSqr, ba2, z1, z2) ) <= eps0_025\n               then retu
rn true\n               else return false\n             fi\n          \+
elif  (z1 < b2OverA) and (b2OverA < z2)  then\n             if evalf[2
4]( m * (intExpATSqrBT(aSqr, ba2, z1, b2OverA) + intExpATSqrBT(1, 0, b
2OverA, z2)) ) <= eps0_025\n               then return true\n         \+
      else return false\n             fi\n          else\n            \+
 if evalf[24]( m * intExpATSqrBT(1, 0, z1, z2) ) <= eps0_025\n        \+
       then return true\n               else return false\n           \+
  fi\n          fi\n   fi;\nend proc:\n" }{TEXT -1 26 "---------------
-----------" }{MPLTEXT 1 0 252 "\nisPracticalZero := \nproc(a::numeric
, b::numeric, z1::numeric, z2::numeric, eps0_025::numeric)\n   if eval
f[24]( erf(max(abs(a * z1 + b), abs(a * z2 + b))) * (erf(z2) - erf(z1)
) ) <= eps0_025\n     then return true\n     else return false\n   fi
\nend proc:\n" }{TEXT -1 26 "--------------------------" }{MPLTEXT 1 
0 112 "\ncondEps := \nproc(v::numeric, eps::numeric)\n   if eps < 1 th
en  evalf[24](abs(v)) > eps  else true fi\nend proc:\n" }{TEXT -1 26 "
--------------------------" }{MPLTEXT 1 0 2 "\n\n" }{TEXT -1 26 "-----
---------------------" }{MPLTEXT 1 0 2 "\n\n" }{TEXT -1 26 "----------
----------------" }{MPLTEXT 1 0 2271 "\ngetPos :=\nproc(y::numeric)::i
nteger;\n   if y <= .5 then return 0 fi;\n   if y > 10.0 then return 4
1 fi;\n   if (y > .5) and (y <= .7375) then return 1 fi;\n   if (y > .
7375) and (y <= .975) then return 2 fi;\n   if (y > .975) and (y <= 1.
2125) then return 3 fi;\n   if (y > 1.2125) and (y <= 1.45) then retur
n 4 fi;\n   if (y > 1.45) and (y <= 1.6875) then return 5 fi;\n   if (
y > 1.6875) and (y <= 1.925) then return 6 fi;\n   if (y > 1.925) and \+
(y <= 2.1625) then return 7 fi;\n   if (y > 2.1625) and (y <= 2.4) the
n return 8 fi;\n   if (y > 2.4) and (y <= 2.6375) then return 9 fi;\n \+
  if (y > 2.6375) and (y <= 2.875) then return 10 fi;\n   if (y > 2.87
5) and (y <= 3.1125) then return 11 fi;\n   if (y > 3.1125) and (y <= \+
3.35) then return 12 fi;\n   if (y > 3.35) and (y <= 3.5875) then retu
rn 13 fi;\n   if (y > 3.5875) and (y <= 3.825) then return 14 fi;\n   \+
if (y > 3.825) and (y <= 4.0625) then return 15 fi;\n   if (y > 4.0625
) and (y <= 4.3) then return 16 fi;\n   if (y > 4.3) and (y <= 4.5375)
 then return 17 fi;\n   if (y > 4.5375) and (y <= 4.775) then return 1
8 fi;\n   if (y > 4.775) and (y <= 5.0125) then return 19 fi;\n   if (
y > 5.0125) and (y <= 5.25) then return 20 fi;\n   if (y > 5.25) and (
y <= 5.4875) then return 21 fi;\n   if (y > 5.4875) and (y <= 5.725) t
hen return 22 fi;\n   if (y > 5.725) and (y <= 5.9625) then return 23 \+
fi;\n   if (y > 5.9625) and (y <= 6.2) then return 24 fi;\n   if (y > \+
6.2) and (y <= 6.4375) then return 25 fi;\n   if (y > 6.4375) and (y <
= 6.675) then return 26 fi;\n   if (y > 6.675) and (y <= 6.9125) then \+
return 27 fi;\n   if (y > 6.9125) and (y <= 7.15) then return 28 fi;\n
   if (y > 7.15) and (y <= 7.3875) then return 29 fi;\n   if (y > 7.38
75) and (y <= 7.625) then return 30 fi;\n   if (y > 7.625) and (y <= 7
.8625) then return 31 fi;\n   if (y > 7.8625) and (y <= 8.1) then retu
rn 32 fi;\n   if (y > 8.1) and (y <= 8.3375) then return 33 fi;\n   if
 (y > 8.3375) and (y <= 8.575) then return 34 fi;\n   if (y > 8.575) a
nd (y <= 8.8125) then return 35 fi;\n   if (y > 8.8125) and (y <= 9.05
) then return 36 fi;\n   if (y > 9.05) and (y <= 9.2875) then return 3
7 fi;\n   if (y > 9.2875) and (y <= 9.525) then return 38 fi;\n   if (
y > 9.525) and (y <= 9.7625) then return 39 fi;\n   if (y > 9.7625) an
d (y <= 10.0) then return 40 fi;\nend proc:\n" }{TEXT -1 26 "---------
-----------------" }{MPLTEXT 1 0 3283 "\nErfExpIntPosBounds :=\nproc( \+
sourceLow::numeric, sourceUp::numeric, low::numeric, up_::numeric,\n  \+
    a::numeric, b::numeric, epsilon::numeric )::numeric;\nlocal m::num
eric, b2OverA::numeric, aSqr::numeric, ba2::numeric, alpha::numeric, \+
\n      beta::numeric, eps0_025::numeric, up::numeric, alpha1::numeric
, \n      alpha1Sqr::numeric, inv2aSqr::numeric, sum::numeric, \n     \+
 lowPos::integer, upPos::integer, i::integer;\n   m  := evalf[24]( 4 /
 Pi * exp(-b^2) * a );\n   b2OverA := evalf[24]( 2 * abs(b) / a);\n   \+
aSqr := evalf[24]( (1 + a^2)^(1/2) );\n   ba2  := evalf[24]( 2 * a * b
 );\n   alpha := evalf[24]( a^(-1) );\n   beta  := evalf[24]( -b * alp
ha );\n   eps0_025 := evalf[24]( 0.25e-1 * epsilon );\n   if isPractic
alZero(a, b, sourceLow, sourceUp, epsilon)\n     then return  0\n   fi
;\n   if isNoNeedOfRecur(b, m, b2OverA, aSqr, ba2, sourceLow, sourceUp
, epsilon) \n     then return evalf[24]( erf(b) * (erf(sourceUp) - erf
(sourceLow)) )\n   fi;\n   lowPos := getPos(low);\n   upPos :=  getPos
(up_);\n   if upPos > nBounds \n     then upPos := nBounds;\n         \+
 up    := 10.0;\n          if lowPos > nBounds \n            then retu
rn evalf[24]( erf(sourceUp) - erf(sourceLow) )\n            else sum :
= evalf[24]( erf(sourceUp) - erf(alpha * up + beta) );\n          fi\n
     else up := up_;\n          sum := 0\n   fi;\n   if upPos = 0\n   \+
  then return ErfExpIntStBefore0_5( low, up, a, b, alpha, beta, m, b2O
verA, aSqr, ba2, eps0_025 )\n     else alpha1    := evalf[24]( (1 + al
pha^2)^(1/2) );\n          alpha1Sqr := evalf[24]( alpha1^2 );\n      \+
    inv2aSqr  := evalf[24]( 0.5 / alpha1Sqr);\n          if lowPos = 0
\n            then sum := evalf[24]( sum + ErfExpIntStBefore0_5( low, \+
0.5, a, b, alpha, \n                                                  \+
             beta, m, b2OverA, aSqr, ba2, eps0_025 ) )\n            el
se if lowPos = upPos\n                   then sum := evalf[24]( sum + \+
ErfExpIntStAfter0_5( lowPos, low, up, a, b, alpha, alpha1, \n         \+
                                                            alpha1Sqr,
 inv2aSqr, beta, m, b2OverA, \n                                       \+
                              aSqr, ba2, eps0_025, epsilon, nIter ) );
\n                        return sum\n                   else sum := e
valf[24]( sum + ErfExpIntStAfter0_5( lowPos, low, bounds[lowPos + 1], \+
a, b, alpha,\n                                                        \+
             alpha1, alpha1Sqr, inv2aSqr, beta, m, b2OverA, \n        \+
                                                             aSqr, ba2
, eps0_025, epsilon, nIter ) );\n                 fi\n          fi;\n \+
         for i from lowPos + 1 to upPos - 1\n            do\n         \+
     sum := evalf[24]( sum + ErfExpIntStAfter0_5( i, bounds[i], bounds
[i + 1], a, b, alpha,\n                                               \+
            alpha1, alpha1Sqr, inv2aSqr, beta, m, b2OverA,\n          \+
                                                 aSqr, ba2, eps0_025, \+
epsilon, nIter ) )\n            od;\n          sum :=  evalf[24]( sum \+
+ ErfExpIntStAfter0_5( upPos, bounds[upPos], up, a, b, alpha,\n       \+
                                                 alpha1, alpha1Sqr, in
v2aSqr, beta, m, b2OverA,\n                                           \+
             aSqr, ba2, eps0_025, epsilon, nIter ) );\n          retur
n sum\n   fi;\nend proc:\n" }{TEXT -1 25 "-------------------------" }
{MPLTEXT 1 0 634 "\nErfExpIntSpecial :=\nproc( a::numeric, b::numeric,
 x::numeric )::numeric;\nlocal low::numeric, up::numeric, q::numeric;
\n   low := evalf[24]( -a * xT + b );\n   up  := evalf[24]( a * x + b \+
);\n   if up <= 0  \n     then return -ErfExpIntPosBounds( -x, xT, -up
, -low, a, -b, epsHalf )\n     elif low < 0\n         then q := evalf[
24](b / a);\n              return evalf[24]( -ErfExpIntPosBounds( q, x
T, 0, -low, a, -b, epsQuarter ) + \n                                 E
rfExpIntPosBounds( -q, x, 0, up, a, b, epsQuarter )\n                 \+
             )\n         else return ErfExpIntPosBounds( -xT, x, low, \+
up, a, b, epsHalf )\n   fi\nend proc:\n" }{TEXT -1 26 "---------------
-----------" }{MPLTEXT 1 0 426 "\nErfExpInt :=\nproc( a::numeric, b::n
umeric, x::numeric )::numeric;\n   if x <= -xT then return 0 fi;\n   i
f x > xT then   return ErfExpInt(a, b, xT) fi;\n   if a = 0 then    re
turn evalf[24]( erf(b) * (1 + erf(x)) ) fi;\n   if a < 0 then    retur
n -ErfExpInt(-a, -b, x) fi;\n   if a > 1 then    return evalf[24]( erf
(a * x + b) * erf(x) - 1 - ErfExpInt(1 / a, -b / a, a * x + b) ) fi;\n
   return ErfExpIntSpecial(a, b, x)\nend proc:\n" }{TEXT -1 26 "------
--------------------" }{MPLTEXT 1 0 12 "\nend module:" }}}{EXCHG 
{PARA 0 "> " 0 "" {MPLTEXT 1 0 0 "" }}}}{EXCHG }{EXCHG {PARA 0 "> " 0 
"" {MPLTEXT 1 0 46 "#CodeGeneration[CSharp](ErfExpIntCalculator1);" }
{TEXT -1 0 "" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 46 "#CodeGenera
tion[CSharp](ErfExpIntStBefore0_5);" }}}{EXCHG {PARA 0 "> " 0 "" 
{MPLTEXT 1 0 0 "" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 69 "a := 0.
93:\nb := 0.34:\nx := 10:\nErfExpIntCalculator:-ErfExpInt(a,b,x);" }}
{PARA 11 "" 1 "" {XPPMATH 20 "6#$\"93_Q;DXbMgt/b!#C" }}}{EXCHG {PARA 
0 "> " 0 "" {MPLTEXT 1 0 0 "" }}}}{MARK "8 0 0" 20 }{VIEWOPTS 1 1 1 1 
1 1803 1 1 1 1 }{PAGENUMBERS 0 1 2 33 1 1 }
